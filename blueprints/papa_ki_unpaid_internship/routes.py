from flask import render_template, request, jsonify, Blueprint
import random
import urllib.parse

# CREATE BLUEPRINT with correct name
bp = Blueprint('papa_ki_unpaid_internship', __name__, url_prefix='/papa-ki-unpaid-internship')

@bp.route('/')
def index():
    """Papa Ki Unpaid Internship main page - DIY tutorial hub"""
    return render_template('papa_ki_unpaid_internship.html')

# ============= TASK GENERATOR ROUTES =============
@bp.route('/task-generator')
def task_generator():
    """Generate funny tasks for kids and family"""
    return render_template('papa_task_generator.html')

@bp.route('/api/generate-task', methods=['POST'])
def api_generate_task():
    """API to generate a random funny task"""
    try:
        data = request.get_json()
        category = data.get('category', 'all')
        difficulty = data.get('difficulty', 'medium')
        
        task = generate_funny_task(category, difficulty)
        papa_comment = get_papa_comment(task)
        
        return jsonify({
            'success': True,
            'task': task,
            'papa_comment': papa_comment,
            'category': category,
            'difficulty': difficulty
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Papa busy рд╣реИрдВ: {str(e)}'
        })

@bp.route('/api/task-categories')
def api_task_categories():
    """Get available task categories"""
    categories = [
        {'id': 'cleaning', 'name': 'ЁЯз╣ рд╕рдлрд╛рдИ рдХреЗ рдХрд╛рдо', 'description': 'рдШрд░ рдХреА рд╕рдлрд╛рдИ рдХреЗ tasks'},
        {'id': 'kitchen', 'name': 'ЁЯН│ рд░рд╕реЛрдИ рдХреЗ рдХрд╛рдо', 'description': 'рдЦрд╛рдирд╛ рдмрдирд╛рдиреЗ рдореЗрдВ рдорджрдж'},
        {'id': 'organization', 'name': 'ЁЯУж рд╡реНрдпрд╡рд╕реНрдерд╛ рдХреЗ рдХрд╛рдо', 'description': 'рдЪреАрдЬреЛрдВ рдХреЛ рд╡реНрдпрд╡рд╕реНрдерд┐рдд рдХрд░рдирд╛'},
        {'id': 'garden', 'name': 'ЁЯМ▒ рдмрд╛рдЧрд╡рд╛рдиреА', 'description': 'рдкреМрдзреЛрдВ рдХреА рджреЗрдЦрднрд╛рд▓'},
        {'id': 'maintenance', 'name': 'ЁЯФз рдЫреЛрдЯреА рдорд░рдореНрдордд', 'description': 'рдШрд░ рдХреА рдЫреЛрдЯреА-рдореЛрдЯреА рдорд░рдореНрдордд'},
        {'id': 'creative', 'name': 'ЁЯОи рд░рдЪрдирд╛рддреНрдордХ рдХрд╛рдо', 'description': 'DIY projects рдФрд░ art'},
        {'id': 'all', 'name': 'ЁЯО▓ рд╕рднреА рдкреНрд░рдХрд╛рд░', 'description': 'рдХрд┐рд╕реА рднреА category рдХрд╛ task'}
    ]
    
    return jsonify({'categories': categories})

# ============= PROBLEM SOLVER ROUTES =============
@bp.route('/problem-solver')
def problem_solver():
    """Papa's problem solving hub"""
    return render_template('papa_problem_solver.html')

@bp.route('/api/solve-problem', methods=['POST'])
def api_solve_problem():
    """API to get solutions for household problems"""
    try:
        data = request.get_json()
        problem = data.get('problem', '').strip()
        urgency = data.get('urgency', 'normal')  # emergency, normal, can-wait
        category = data.get('category', 'general')  # electrical, plumbing, tech, etc.
        
        if not problem:
            return jsonify({
                'success': False,
                'error': 'Problem рддреЛ рдмрддрд╛рдУ рднрд╛рдИ! Papa рдХреИрд╕реЗ help рдХрд░реЗрдВрдЧреЗ?'
            })
        
        # Get solutions
        solutions = get_problem_solutions(problem, urgency)
        papa_advice = get_papa_problem_advice(problem)
        youtube_links = search_tutorial_videos(problem)
        
        return jsonify({
            'success': True,
            'problem': problem,
            'urgency': urgency,
            'category': detect_problem_category(problem),
            'solutions': solutions,
            'papa_advice': papa_advice,
            'youtube_tutorials': youtube_links,
            'estimated_time': estimate_fix_time(problem),
            'difficulty': estimate_difficulty(problem),
            'tools_needed': get_required_tools(problem)
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Papa рдХреЗ pass solution рдирд╣реАрдВ рдорд┐рд▓рд╛: {str(e)}'
        })

@bp.route('/api/common-problems')
def api_common_problems():
    """Get list of common household problems"""
    problems = [
        {'problem': 'ЁЯМА Fan рдирд╣реАрдВ рдЪрд▓ рд░рд╣рд╛ рд╣реИ', 'category': 'electrical', 'urgency': 'normal', 'popularity': 'рдмрд╣реБрдд common'},
        {'problem': 'ЁЯЪ┐ Tap рд╕реЗ рдкрд╛рдиреА leak рд╣реЛ рд░рд╣рд╛ рд╣реИ', 'category': 'plumbing', 'urgency': 'high', 'popularity': 'Daily рд╣реЛрддрд╛ рд╣реИ'},
        {'problem': 'ЁЯУ▒ WiFi рдмрд╣реБрдд slow рд╣реИ', 'category': 'tech', 'urgency': 'normal', 'popularity': 'рд╣рдореЗрд╢рд╛ problem'},
        {'problem': 'тЭДя╕П AC рдардВрдбрд╛ рдирд╣реАрдВ рдХрд░ рд░рд╣рд╛', 'category': 'appliances', 'urgency': 'high', 'popularity': 'Summer special'},
        {'problem': 'ЁЯЪк Door properly рдмрдВрдж рдирд╣реАрдВ рд╣реЛ рд░рд╣рд╛', 'category': 'general', 'urgency': 'low', 'popularity': 'Monsoon рдореЗрдВ рдЬреНрдпрд╛рджрд╛'},
        {'problem': 'ЁЯкС Chair рдЯреВрдЯ рдЧрдИ рд╣реИ', 'category': 'furniture', 'urgency': 'low', 'popularity': 'Overuse рд╕реЗ рд╣реЛрддрд╛ рд╣реИ'},
        {'problem': 'ЁЯТб Light рдирд╣реАрдВ рдЬрд▓ рд░рд╣реА', 'category': 'electrical', 'urgency': 'normal', 'popularity': 'рд░реЛрдЬрд╝ рдХрд╛ drama'},
        {'problem': 'ЁЯУ║ TV remote рдХрд╛рдо рдирд╣реАрдВ рдХрд░ рд░рд╣рд╛', 'category': 'tech', 'urgency': 'low', 'popularity': 'рдмрдЪреНрдЪреЛрдВ рдХреА рд╡рдЬрд╣ рд╕реЗ'},
        {'problem': 'ЁЯЪ╜ Toilet flush рдирд╣реАрдВ рд╣реЛ рд░рд╣рд╛', 'category': 'plumbing', 'urgency': 'high', 'popularity': 'Common issue'},
        {'problem': 'ЁЯФМ Socket рдореЗрдВ plug loose рд╣реЛ рдЧрдпрд╛', 'category': 'electrical', 'urgency': 'medium', 'popularity': 'Safety concern'}
    ]
    
    return jsonify({'common_problems': problems})

# ============= TASK GENERATOR HELPER FUNCTIONS =============
def generate_funny_task(category, difficulty):
    """Generate funny and engaging household tasks"""
    
    tasks_db = {
        'cleaning': [
            'ЁЯз╣ рдЖрдЬ рд╕рднреА рдХреЛрдиреЛрдВ рд╕реЗ spider webs рд╣рдЯрд╛рдУ - detective рдмрдирдХрд░ рд╣рд░ spider рдХреЛ рдвреВрдВрдвреЛ!',
            'ЁЯз╜ Bathroom рдХреА tiles рдкрд░ рд╕реЗ soap рдХреЗ рдирд┐рд╢рд╛рди рд╣рдЯрд╛рдУ рдФрд░ shine рдХрд░рдХреЗ mirror рдмрдирд╛рдУ',
            'ЁЯз║ рдЕрдкрдиреЗ рдХрдорд░реЗ рдХреЗ рд╕рднреА рдХрдкрдбрд╝реЗ organized рдХрд░рдХреЗ color wise arrange рдХрд░реЛ',
            'ЁЯкЯ рд╕рднреА windows clean рдХрд░рдХреЗ streak-free shine рд▓рд╛рдУ',
            'ЁЯТи рд╕рднреА fans рдХреА dust рд╣рдЯрд╛рдУ рдФрд░ blade count рдХрд░рдХреЗ report рджреЛ',
            'ЁЯЧСя╕П рдШрд░ рдХреЗ рд╕рднреА dustbins empty рдХрд░рдХреЗ proper segregation рдХрд░реЛ'
        ],
        'kitchen': [
            'ЁЯН│ рдЖрдЬ breakfast рдореЗрдВ рдХреБрдЫ creative рдмрдирд╛рдУ - leftover ingredients use рдХрд░рдХреЗ',
            'ЁЯзД Kitchen рдХреЗ рд╕рднреА masala containers organize рдХрд░рдХреЗ label рд▓рдЧрд╛рдУ',
            'ЁЯН╜я╕П рд╕рднреА dishes wash рдХрд░рдХреЗ perfect shine рд▓рд╛рдУ',
            'тЭДя╕П Fridge clean рдХрд░рдХреЗ expiry dates check рдХрд░реЛ',
            'ЁЯзК Ice trays fill рдХрд░рдХреЗ freezer organize рдХрд░реЛ',
            'ЁЯНЕ рд╕рднреА vegetables fresh рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП proper storage рдХрд░реЛ'
        ],
        'organization': [
            'ЁЯУЪ рд╕рднреА books рдХреЛ height wise arrange рдХрд░рдХреЗ library рдмрдирд╛рдУ',
            'ЁЯСХ Wardrobe рдХреЛ season wise organize рдХрд░реЛ',
            'ЁЯУж Store room clean рдХрд░рдХреЗ рд╕рдм рдХреБрдЫ categorize рдХрд░реЛ',
            'ЁЯОо рд╕рднреА electronic items рдХреЗ chargers рдФрд░ cables organize рдХрд░реЛ',
            'ЁЯТД Dressing table рдкрд░ рд╕рдм рдХреБрдЫ neat рдФрд░ accessible arrange рдХрд░реЛ',
            'ЁЯУ▒ Phone gallery clean рдХрд░рдХреЗ photos organize рдХрд░реЛ'
        ],
        'garden': [
            'ЁЯМ▒ рд╕рднреА plants рдХреЛ рдкрд╛рдиреА рджреЛ рдФрд░ soil moisture check рдХрд░реЛ',
            'ЁЯНГ Dead leaves рд╣рдЯрд╛рдУ рдФрд░ plants рдХреА health check рдХрд░реЛ',
            'ЁЯМ║ Flower pots rearrange рдХрд░рдХреЗ рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ display рдмрдирд╛рдУ',
            'ЁЯРЫ Plants рдкрд░ рдХреЛрдИ pests рддреЛ рдирд╣реАрдВ - inspection рдХрд░рдХреЗ report рджреЛ',
            'ЁЯТз Watering schedule рдмрдирд╛рдУ рдФрд░ proper drainage check рдХрд░реЛ',
            'ЁЯМ┐ New plants рдХреЗ рд▓рд┐рдП suitable locations identify рдХрд░реЛ'
        ],
        'maintenance': [
            'ЁЯФз рдШрд░ рдХреЗ рд╕рднреА loose screws tight рдХрд░реЛ',
            'ЁЯЪк рд╕рднреА door handles рдФрд░ locks рдХреА functioning check рдХрд░реЛ',
            'ЁЯТб рд╕рднреА bulbs working рд╣реИрдВ рдХрд┐ рдирд╣реАрдВ test рдХрд░реЛ',
            'ЁЯФМ рд╕рднреА electrical connections check рдХрд░рдХреЗ loose plugs fix рдХрд░реЛ',
            'ЁЯкЯ Windows рдХреЗ hinges рдореЗрдВ oil рд▓рдЧрд╛рдУ',
            'ЁЯЪ┐ Taps рдХреА leakage check рдХрд░рдХреЗ minor fixes рдХрд░реЛ'
        ],
        'creative': [
            'ЁЯОи Waste materials use рдХрд░рдХреЗ рдХреЛрдИ useful item рдмрдирд╛рдУ',
            'ЁЯУ╕ рдШрд░ рдХреА рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреА photos рд▓реЗрдХрд░ wall gallery рдмрдирд╛рдУ',
            'тЬВя╕П Old newspapers рд╕реЗ decorative items рдмрдирд╛рдУ',
            'ЁЯЦ╝я╕П Room рдХреЛ rearrange рдХрд░рдХреЗ рдирдпрд╛ look рджреЛ',
            'ЁЯТб Energy saving рдХреЗ рд▓рд┐рдП рдХреЛрдИ creative solution рд╕реЛрдЪреЛ',
            'ЁЯОн Family рдХреЗ рд▓рд┐рдП рдХреЛрдИ fun activity organize рдХрд░реЛ'
        ]
    }
    
    # Select appropriate task pool
    if category == 'all':
        all_tasks = []
        for task_list in tasks_db.values():
            all_tasks.extend(task_list)
        selected_pool = all_tasks
    else:
        selected_pool = tasks_db.get(category, tasks_db['cleaning'])
    
    # Pick random task
    task = random.choice(selected_pool)
    
    # Add difficulty-based modifications
    if difficulty == 'easy':
        task += ' (рдЖрд░рд╛рдо рд╕реЗ рдХрд░рдирд╛, рдЬрд▓реНрджреА рдирд╣реАрдВ рд╣реИ)'
    elif difficulty == 'hard':
        task += ' (рдЬрд▓реНрджреА complete рдХрд░рдХреЗ time record рдХрд░рдирд╛!)'
    
    return task

def get_papa_comment(task):
    """Get Papa's encouraging comment for the task"""
    
    comments = [
        'Wah beta! Ye task perfect рд╣реИ рдЖрдЬ рдХреЗ рд▓рд┐рдП. Papa proud рд╣реЛрдВрдЧреЗ! ЁЯСП',
        'Shabash! Iss task рд╕реЗ рдШрд░ рдФрд░ рднреА beautiful рд╣реЛ рдЬрд╛рдПрдЧрд╛! тЬи',
        'Good choice! Papa рдХреЗ рдЬрдорд╛рдиреЗ рдореЗрдВ рдпрд╣реА рд╕рдм tasks рдХрд░рдХреЗ рд╣рдордиреЗ рд╕рдм kuch рд╕реАрдЦрд╛ рдерд╛! ЁЯТк',
        'Excellent! Task complete рдХрд░рдиреЗ рдХреЗ рдмрд╛рдж treat mileрдЧреА! ЁЯНл',
        'Perfect timing! Ye task рдХрд░рдиреЗ рд╕реЗ рдмрд╣реБрдд satisfaction рдорд┐рд▓реЗрдЧрд╛! ЁЯШК',
        'Bahut achha! Mummy рдмрд╣реБрдд рдЦреБрд╢ рд╣реЛрдВрдЧреА рдЬрдм рджреЗрдЦреЗрдВрдЧреА! ЁЯе░',
        'Smart choice! Aise small tasks рд╕реЗ big difference рд╣реЛрддрд╛ рд╣реИ! ЁЯМЯ',
        'Very good! Sunday рдХреЛ productive рдмрдирд╛рдиреЗ рдХрд╛ рдмреЗрд╣рддрд░реАрди рддрд░реАрдХрд╛! ЁЯСН'
    ]
    
    return random.choice(comments)

# ============= PROBLEM SOLVER HELPER FUNCTIONS =============

def get_problem_solutions(problem, urgency):
    """Get comprehensive step-by-step solutions"""
    
    solutions_db = {
        'fan': {
            'quick_check': [
                'тЪб Main switch on рд╣реИ рдХрд┐ рдирд╣реАрдВ check рдХрд░реЛ',
                'ЁЯФМ Fan рдХрд╛ regulator properly connected рд╣реИ?',
                'ЁЯТб рджреВрд╕рд░реЗ electrical items рдХрд╛рдо рдХрд░ рд░рд╣реЗ рд╣реИрдВ?',
                'ЁЯМА Fan рдХреЗ blades manually рдШреБрдорд╛рдиреЗ рд╕реЗ рдЪрд▓рддрд╛ рд╣реИ?'
            ],
            'diy_steps': [
                'ЁЯФз Main switch off рдХрд░рдХреЗ safety ensure рдХрд░реЛ',
                'ЁЯз╜ Fan blades рдХреЛ clean рдХрд░реЛ - dust accumulation check рдХрд░реЛ', 
                'ЁЯФи All screws рдФрд░ brackets properly tight рд╣реИрдВ рдХрд┐ рдирд╣реАрдВ',
                'тЪЩя╕П Capacitor check рдХрд░реЛ - bulged рдпрд╛ burnt smell?',
                'ЁЯТз Motor bearings рдореЗрдВ oil drop рдХрд░рдиреЗ рдХреА рдЬрд░реВрд░рдд рд╣реЛ рд╕рдХрддреА рд╣реИ',
                'ЁЯФД Regulator рдХреЛ different speeds рдкрд░ test рдХрд░реЛ'
            ],
            'safety_tips': [
                'тЪая╕П рд╣рдореЗрд╢рд╛ main switch off рдХрд░рдХреЗ рдХрд╛рдо рдХрд░реЛ',
                'ЁЯзд Rubber gloves рдкрд╣рдиреЛ electrical work рдХреЗ рд▓рд┐рдП',
                'ЁЯФж Good lighting рдореЗрдВ рдХрд╛рдо рдХрд░реЛ',
                'ЁЯСе Someone рдХреЛ inform рдХрд░рдХреЗ рдХрд╛рдо рдХрд░реЛ'
            ],
            'when_to_call_expert': 'рдЕрдЧрд░ capacitor burnt smell рдЖ рд░рд╣реА рд╣реИ рдпрд╛ motor рд╕реЗ grinding sound рдЖ рд░рд╣рд╛ рд╣реИ рдпрд╛ rewiring рдХреА рдЬрд░реВрд░рдд рд╣реИ'
        },
        'tap': {
            'quick_check': [
                'ЁЯЪ░ Main water supply on рд╣реИ рдХрд┐ рдирд╣реАрдВ',
                'ЁЯТз рджреВрд╕рд░реЗ taps рд╕реЗ рдкрд╛рдиреА рдЖ рд░рд╣рд╛ рд╣реИ рдХрд┐ рдирд╣реАрдВ',
                'ЁЯФз Tap handle properly turn рд╣реЛ рд░рд╣рд╛ рд╣реИ?',
                'ЁЯСА Visible leak рдХрд╣рд╛рдБ рд╕реЗ рд╣реЛ рд░рд╣рд╛ рд╣реИ - handle рд╕реЗ рдпрд╛ base рд╕реЗ?'
            ],
            'diy_steps': [
                'ЁЯФз Main water valve рдмрдВрдж рдХрд░реЛ рдкрд╣рд▓реЗ (very important)',
                'ЁЯкЫ Tap рдХрд╛ handle remove рдХрд░рдХреЗ rubber washer check рдХрд░реЛ',
                'ЁЯз╜ Valve seat рдХреЛ clean рдХрд░реЛ - sediment рд╣рдЯрд╛рдУ',
                'ЁЯФД рдирдпрд╛ washer рд▓рдЧрд╛рдХрд░ proper рддрд░реАрдХреЗ рд╕реЗ reassemble рдХрд░реЛ',
                'ЁЯТз Slowly water supply on рдХрд░рдХреЗ test рдХрд░реЛ',
                'ЁЯФН рдХреЛрдИ leak рддреЛ рдирд╣реАрдВ - thorough check рдХрд░реЛ'
            ],
            'safety_tips': [
                'ЁЯТз Main valve рдмрдВрдж рдХрд░рдирд╛ рдмрд┐рд▓реНрдХреБрд▓ рдордд рднреВрд▓реЛ',
                'ЁЯз╜ Clean cloth рд╕реЗ area рдХреЛ dry рд░рдЦреЛ',
                'ЁЯФз Right size tools use рдХрд░реЛ - force рдирд╣реАрдВ рд▓рдЧрд╛рдУ'
            ],
            'when_to_call_expert': 'рдЕрдЧрд░ main pipe рдореЗрдВ leak рд╣реИ рдпрд╛ pressure issues рд╣реИрдВ рдпрд╛ multiple taps affected рд╣реИрдВ'
        },
        'wifi': {
            'quick_check': [
                'ЁЯУ▒ Phone рдореЗрдВ рджреВрд╕рд░реЗ WiFi networks рджрд┐рдЦ рд░рд╣реЗ рд╣реИрдВ?',
                'ЁЯФМ Router рдХрд╛ power properly connected рд╣реИ?',
                'ЁЯТб Router рдХреЗ lights green рд╣реИрдВ рдХрд┐ рдирд╣реАрдВ?',
                'ЁЯУ╢ Router рдХреЗ рдкрд╛рд╕ рдЬрд╛рдХрд░ speed test рдХрд░реЛ'
            ],
            'diy_steps': [
                'ЁЯФД Router рдХреЛ 30 seconds off рдХрд░рдХреЗ рдлрд┐рд░ on рдХрд░реЛ',
                'ЁЯУН Router рдХреА position central рдФрд░ elevated рд░рдЦреЛ',
                'ЁЯУ▒ Phone рдХреЛ WiFi forget рдХрд░рдХреЗ рдлрд┐рд░ reconnect рдХрд░реЛ',
                'ЁЯТ╗ Speed test different devices рдкрд░ рдХрд░реЛ',
                'ЁЯМР ISP рдХреЗ customer care рдореЗрдВ speed complaint рдХрд░реЛ',
                'ЁЯУб Router antennas рдХреЛ properly position рдХрд░реЛ'
            ],
            'safety_tips': [
                'тЪб Router рдХреЛ properly ventilated area рдореЗрдВ рд░рдЦреЛ',
                'ЁЯМбя╕П Overheating рд╕реЗ рдмрдЪрд╛рдУ - dust clean рдХрд░рддреЗ рд░рд╣реЛ'
            ],
            'when_to_call_expert': 'рдЕрдЧрд░ hardware damage рд╣реИ рдпрд╛ ISP line issue рд╣реИ рдпрд╛ multiple devices рд╕реЗ рдХреЛрдИ connect рдирд╣реАрдВ рд╣реЛ рд░рд╣рд╛'
        },
        'ac': {
            'quick_check': [
                'тЪб AC рдХрд╛ power on рд╣реИ рдФрд░ display working рд╣реИ?',
                'ЁЯМбя╕П Remote рдореЗрдВ рд╕рд╣реА temperature set рд╣реИ?',
                'ЁЯТи AC рд╕реЗ air рдЖ рд░рд╣рд╛ рд╣реИ рд▓реЗрдХрд┐рди рдардВрдбреА рдирд╣реАрдВ?',
                'ЁЯзК Ice formation рддреЛ рдирд╣реАрдВ outdoor unit рдкрд░?'
            ],
            'diy_steps': [
                'ЁЯз╜ Indoor filter рдХреЛ remove рдХрд░рдХреЗ clean рдХрд░реЛ',
                'ЁЯТи Outdoor unit рдХреЗ around clean рдХрд░реЛ - leaves рд╣рдЯрд╛рдУ',
                'ЁЯМбя╕П Thermostat setting check рдХрд░реЛ',
                'тП░ AC рдХреЛ 30 minutes run рдХрд░рдХреЗ рджреЗрдЦреЛ',
                'ЁЯУП Proper distance maintain рдХрд░реЛ furniture рд╕реЗ',
                'ЁЯЪк Room properly sealed рд╣реИ - doors/windows check рдХрд░реЛ'
            ],
            'safety_tips': [
                'тЪб Main power off рдХрд░рдХреЗ filter cleaning рдХрд░реЛ',
                'ЁЯзд Gloves рдкрд╣рдирдХрд░ outdoor unit clean рдХрд░реЛ'
            ],
            'when_to_call_expert': 'рдЕрдЧрд░ gas refill рдХреА рдЬрд░реВрд░рдд рд╣реИ рдпрд╛ compressor issues рд╣реИрдВ рдпрд╛ electrical problems рд╣реИрдВ'
        }
    }
    
    # Detect problem type and return relevant solution
    problem_lower = problem.lower()
    
    for key, solution in solutions_db.items():
        if key in problem_lower:
            return solution
    
    # Generic solution for unknown problems
    return {
        'quick_check': [
            'ЁЯФН Problem рдХреЛ exactly identify рдХрд░рдиреЗ рдХреА рдХреЛрд╢рд┐рд╢ рдХрд░реЛ',
            'ЁЯУЦ Manual рдпрд╛ warranty card check рдХрд░реЛ',
            'ЁЯФМ Power supply рдФрд░ connections verify рдХрд░реЛ',
            'ЁЯСА Visual inspection рдХрд░реЛ - рдХреБрдЫ obvious damage?'
        ],
        'diy_steps': [
            'ЁЯУЦ Product manual рдкрдврд╝реЛ рдЕрдЧрд░ available рд╣реИ',
            'ЁЯОе YouTube рдкрд░ similar problem search рдХрд░реЛ',
            'ЁЯФз Basic cleaning рдФрд░ tightening try рдХрд░реЛ',
            'ЁЯУЮ Manufacturer helpline рдкрд░ call рдХрд░реЛ',
            'ЁЯТм Online forums рдореЗрдВ similar cases рдвреВрдВрдвреЛ'
        ],
        'safety_tips': [
            'тЪая╕П рдЕрдЧрд░ electrical item рд╣реИ рддреЛ power off рдХрд░реЛ',
            'ЁЯзд Safety gear use рдХрд░реЛ',
            'ЁЯСе рдХрд┐рд╕реА рдХреЛ inform рдХрд░рдХреЗ рдХрд╛рдо рдХрд░реЛ'
        ],
        'when_to_call_expert': 'рдЕрдЧрд░ safety concern рд╣реИ рдпрд╛ warranty void рд╣реЛ рд╕рдХрддреА рд╣реИ рдпрд╛ complex repair рдЪрд╛рд╣рд┐рдП'
    }

def get_papa_problem_advice(problem):
    """Papa's specific wisdom for different problems"""
    
    advice_db = {
        'fan': 'рдмреЗрдЯрд╛, fan рдХреА 90% problems capacitor рдпрд╛ dust рдореЗрдВ рд╣реЛрддреА рд╣реИрдВред рдЧрд░реНрдореА рдореЗрдВ fan repair рдХрд░рдирд╛ рдмрд╣реБрдд рдЬрд░реВрд░реА рд╣реИред Safety рдХреЗ рд▓рд┐рдП рд╣рдореЗрд╢рд╛ main switch off рд░рдЦреЛред Capacitor тВ╣50 рдХрд╛ рд╣реИ, electrician тВ╣500 рд▓реЗрддрд╛ рд╣реИ!',
        'tap': 'Tap leakage mostly rubber washer (тВ╣5) рдХреА рд╡рдЬрд╣ рд╕реЗ рд╣реЛрддреА рд╣реИред Main valve location рдкрд╣рд▓реЗ рд╕реЗ рдкрддрд╛ рдХрд░ рд▓реЛ, emergency рдореЗрдВ рдХрд╛рдо рдЖрдПрдЧрд╛ред рдкрд╛рдиреА рдмрдВрдж рдХрд░рдирд╛ рдмрд┐рд▓реНрдХреБрд▓ рдордд рднреВрд▓реЛ - flooding рд╣реЛ рд╕рдХрддреА рд╣реИ!',
        'wifi': 'WiFi problems рдореЗрдВ 80% router restart рд╕реЗ solve рд╣реЛ рдЬрд╛рддреА рд╣реИрдВред Router рдХреЛ corner рдореЗрдВ рдордд рд░рдЦреЛ, heat рдФрд░ dust рд╕реЗ рдмрдЪрд╛рдУред Speed slow рд╣реИ рддреЛ ISP рдХреЛ complaint рдХрд░рдирд╛ рдкрдбрд╝реЗрдЧрд╛, data backup рд░рдЦреЛред',
        'ac': 'AC рдХреА filter monthly clean рдХрд░рддреЗ рд░рд╣реЛ, gas filling рд╕реЗ рдмрдЪ рдЬрд╛рдПрдЧреАред Summer рд╢реБрд░реВ рд╣реЛрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ service рдХрд░рд╡рд╛ рд▓реЛ. Emergency рдореЗрдВ fan + AC together chalao, jaldi рдардВрдбрдХ рдорд┐рд▓реЗрдЧреАред',
        'door': 'Door problems рдореЗрдВ WD-40 рдпрд╛ coconut oil magic рдХрд░рддрд╛ рд╣реИ. Monsoon рдореЗрдВ wood swelling рд╣реЛрддреА рд╣реИ, normal рд╣реИред Hinges рдХреА proper lubrication рдХрд░рддреЗ рд░рд╣реЛред',
        'light': 'Light problems рдореЗрдВ рдкрд╣рд▓реЗ bulb change рдХрд░рдХреЗ рджреЗрдЦреЛред Switch рдФрд░ holder loose рддреЛ рдирд╣реАрдВ? Electrical items рдореЗрдВ рд╣рдореЗрд╢рд╛ right wattage use рдХрд░реЛред'
    }
    
    problem_lower = problem.lower()
    
    for key, advice in advice_db.items():
        if key in problem_lower:
            return advice
    
    return 'рдмреЗрдЯрд╛, рд╣рд░ problem рдХрд╛ solution рд╣реЛрддрд╛ рд╣реИред Google рдФрд░ YouTube Papa рдХреЗ рдмрд╛рдж рд╕рдмрд╕реЗ рдЕрдЪреНрдЫреЗ teachers рд╣реИрдВред Safety first, patience second, рдФрд░ рдЬрдм doubt рд╣реЛ рддреЛ expert рд╕реЗ рдкреВрдЫ рд▓реЛред DIY рдореЗрдВ 70% problems solve рд╣реЛ рдЬрд╛рддреА рд╣реИрдВ!'

def search_tutorial_videos(problem):
    """Generate YouTube tutorial links for the problem"""
    
    # Enhanced search queries for better results
    search_queries = {
        'fan': 'ceiling fan not working repair hindi tutorial',
        'tap': 'tap leaking repair plumbing hindi',
        'wifi': 'wifi slow speed fix router hindi',
        'ac': 'air conditioner not cooling repair hindi',
        'door': 'door repair hinges hindi tutorial',
        'light': 'light bulb holder repair electrical hindi'
    }
    
    problem_lower = problem.lower()
    
    # Find relevant search query
    search_query = None
    for key, query in search_queries.items():
        if key in problem_lower:
            search_query = query
            break
    
    if not search_query:
        search_query = f"{problem} repair hindi tutorial DIY"
    
    # Generate multiple search variations
    tutorials = []
    
    base_url = "https://www.youtube.com/results?search_query="
    
    search_variations = [
        f"{search_query} step by step",
        f"{search_query} DIY home repair",
        f"{search_query} professional vs DIY"
    ]
    
    for i, variation in enumerate(search_variations):
        tutorials.append({
            'title': f"Tutorial {i+1}: {problem} - Hindi Solution",
            'description': f"Step by step repair guide in Hindi",
            'search_link': base_url + urllib.parse.quote(variation),
            'estimated_duration': f"{random.randint(5,15)} minutes",
            'papa_rating': random.choice(["тнРтнРтнРтнР", "тнРтнРтнРтнРтнР", "тнРтнРтнР"]),
            'difficulty_level': random.choice(["Beginner", "Intermediate", "Advanced"]),
            'channel_type': random.choice(["DIY Expert", "Professional", "Home Repair"])
        })
    
    return tutorials

def detect_problem_category(problem):
    """Automatically detect problem category"""
    
    categories = {
        'electrical': ['fan', 'light', 'bulb', 'socket', 'switch', 'wiring', 'electrical'],
        'plumbing': ['tap', 'pipe', 'water', 'leak', 'toilet', 'flush', 'drain'],
        'tech': ['wifi', 'internet', 'router', 'phone', 'computer', 'tv', 'remote'],
        'appliances': ['ac', 'air conditioner', 'fridge', 'washing machine', 'microwave'],
        'furniture': ['chair', 'table', 'bed', 'cabinet', 'drawer'],
        'general': ['door', 'window', 'wall', 'paint', 'clean']
    }
    
    problem_lower = problem.lower()
    
    for category, keywords in categories.items():
        if any(keyword in problem_lower for keyword in keywords):
            return category
    
    return 'general'

def estimate_fix_time(problem):
    """Estimate repair time based on problem type"""
    
    time_estimates = {
        'fan': '45-90 minutes (including cleaning)',
        'tap': '20-45 minutes (washer replacement)', 
        'wifi': '10-30 minutes (mostly settings)',
        'ac': '30-60 minutes (filter cleaning only)',
        'door': '15-30 minutes (lubrication/adjustment)',
        'light': '5-20 minutes (bulb/holder replacement)',
        'toilet': '30-60 minutes (flush mechanism)',
        'socket': '20-40 minutes (replacement work)'
    }
    
    problem_lower = problem.lower()
    
    for key, time in time_estimates.items():
        if key in problem_lower:
            return time
    
    return '30-90 minutes (depends on complexity)'

def estimate_difficulty(problem):
    """Estimate difficulty level with Papa's perspective"""
    
    difficulty_levels = {
        'fan': 'Medium - Electrical рдЬрд╛рдирдХрд╛рд░реА helpful рд╣реЛрдЧреА',
        'tap': 'Easy - Basic tools рдХрд╛рдлреА рд╣реИрдВ',
        'wifi': 'Easy - Settings change рдХрд░рдирд╛ рд╣реИ',
        'ac': 'Easy (cleaning) / Hard (gas refill)',
        'door': 'Easy - Maintenance work рд╣реИ',
        'light': 'Easy - Simple replacement',
        'toilet': 'Medium - Plumbing basics рдЬрд╛рдирдирд╛ рдЪрд╛рд╣рд┐рдП',
        'socket': 'Hard - Electrical expertise рдЬрд░реВрд░реА'
    }
    
    problem_lower = problem.lower()
    
    for key, difficulty in difficulty_levels.items():
        if key in problem_lower:
            return difficulty
    
    return 'Medium - Basic DIY skills рдФрд░ patience рдЬрд░реВрд░реА'

def get_required_tools(problem):
    """List tools needed for the repair"""
    
    tools_db = {
        'fan': ['Screwdriver set', 'Multimeter (optional)', 'Clean cloth', 'Oil/WD-40', 'Ladder/stool'],
        'tap': ['Adjustable wrench', 'Screwdriver', 'New rubber washer', 'Plumber tape', 'Clean cloth'],
        'wifi': ['No tools needed', 'Just phone/laptop', 'Router manual (optional)'],
        'ac': ['Clean cloth', 'Vacuum cleaner', 'Mild detergent', 'Water spray'],
        'door': ['Screwdriver', 'Oil/WD-40', 'Sandpaper (optional)', 'Clean cloth'],
        'light': ['Screwdriver', 'New bulb/holder', 'Voltage tester', 'Wire stripper (if needed)']
    }
    
    problem_lower = problem.lower()
    
    for key, tools in tools_db.items():
        if key in problem_lower:
            return tools
    
    return ['Basic toolkit', 'Screwdriver set', 'Clean cloth', 'Flashlight', 'Patience рдФрд░ common sense']
