from flask import render_template, request, jsonify, Blueprint
import requests
import json
import random

bp = Blueprint('papa', __name__, url_prefix='/papa')

@bp.route('/')
def index():
    """Papa Ki Unpaid Internship main page - DIY tutorial hub"""
    return render_template('papa_ki_unpaid_internship.html')

@bp.route('/search-tutorials', methods=['POST'])
def search_tutorials():
    """Search for DIY tutorials based on problem description"""
    try:
        data = request.get_json()
        problem = data.get('problem', '').strip()
        category = data.get('category', 'general')
        
        if not problem:
            return jsonify({
                'success': False,
                'error': '‡§ï‡•Å‡§õ ‡§§‡•ã problem ‡§¨‡§§‡§æ‡§ì ‡§≠‡§æ‡§à!'
            })
        
        # Generate tutorial suggestions based on common Indian household problems
        tutorials = generate_tutorial_suggestions(problem, category)
        
        return jsonify({
            'success': True,
            'problem': problem,
            'category': category,
            'tutorials': tutorials,
            'papa_advice': get_papa_advice(category)
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        })

@bp.route('/tutorial-categories')
def tutorial_categories():
    """Show different categories of tutorials"""
    categories = {
        'electrical': {
            'name': '‚ö° ‡§¨‡§ø‡§ú‡§≤‡•Ä ‡§ï‡§æ ‡§ï‡§æ‡§Æ',
            'description': 'switches, fans, lights ‡§ï‡•Ä problems',
            'common_issues': ['Fan ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤ ‡§∞‡§π‡§æ', 'Switch ‡§ñ‡§∞‡§æ‡§¨ ‡§π‡•à', 'Light ‡§®‡§π‡•Ä‡§Ç ‡§ú‡§≤ ‡§∞‡§π‡•Ä']
        },
        'plumbing': {
            'name': 'üöø ‡§™‡§æ‡§®‡•Ä ‡§ï‡§æ ‡§ï‡§æ‡§Æ', 
            'description': 'pipes, taps, bathroom ‡§ï‡•Ä problems',
            'common_issues': ['Tap ‡§∏‡•á ‡§™‡§æ‡§®‡•Ä leak', 'Toilet flush problem', 'Pipe block']
        },
        'furniture': {
            'name': 'ü™ë ‡§´‡§∞‡•ç‡§®‡•Ä‡§ö‡§∞ repair',
            'description': 'chair, table, almirah ‡§ï‡•Ä problems', 
            'common_issues': ['Chair ‡§ü‡•Ç‡§ü ‡§ó‡§à', 'Table ‡§π‡§ø‡§≤ ‡§∞‡§π‡•Ä ‡§π‡•à', 'Drawer ‡§®‡§π‡•Ä‡§Ç ‡§ñ‡•Å‡§≤ ‡§∞‡§π‡§æ']
        },
        'appliances': {
            'name': 'üì± ‡§ò‡§∞‡•á‡§≤‡•Ç ‡§∏‡§æ‡§Æ‡§æ‡§®',
            'description': 'TV, AC, fridge ‡§ï‡•Ä problems',
            'common_issues': ['TV ‡§ï‡•Ä picture problem', 'AC ‡§†‡§Ç‡§°‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∞‡§π‡§æ', 'Fridge ‡§Æ‡•á‡§Ç ‡§™‡§æ‡§®‡•Ä']
        },
        'general': {
            'name': 'üîß ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§Æ‡§∞‡§Æ‡•ç‡§Æ‡§§',
            'description': '‡§ò‡§∞ ‡§ï‡•Ä ‡§õ‡•ã‡§ü‡•Ä-‡§Æ‡•ã‡§ü‡•Ä problems',
            'common_issues': ['‡§¶‡•Ä‡§µ‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§õ‡•á‡§¶', '‡§¶‡§∞‡§µ‡§æ‡§ú‡§æ ‡§¨‡§Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∞‡§π‡§æ', '‡§ñ‡§ø‡§°‡§º‡§ï‡•Ä ‡§Ö‡§ü‡§ï ‡§ó‡§à']
        }
    }
    
    return render_template('papa_ki_unpaid_internship.html')

# ============= TASK GENERATOR ROUTES =============

@bp.route('/diy-tools')
def diy_tools():
    """Show essential DIY tools every papa should have"""
    tools = {
        'basic': {
            'name': '‡§¨‡•á‡§∏‡§ø‡§ï ‡§ü‡•Ç‡§≤‡•ç‡§∏',
            'tools': [
                {'name': '‡§π‡§•‡•å‡§°‡§º‡§æ (Hammer)', 'use': '‡§ï‡•Ä‡§≤ ‡§†‡•ã‡§ï‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è', 'price': '‚Çπ50-100'},
                {'name': '‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ç ‡§°‡•ç‡§∞‡§æ‡§á‡§µ‡§∞ ‡§∏‡•á‡§ü', 'use': '‡§™‡•á‡§Ç‡§ö ‡§ï‡§∏‡§®‡•á-‡§¢‡•Ä‡§≤‡•á ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è', 'price': '‚Çπ100-200'},
                {'name': '‡§™‡•ç‡§≤‡§æ‡§Ø‡§∞‡•ç‡§∏', 'use': '‡§§‡§æ‡§∞ ‡§™‡§ï‡§°‡§º‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è', 'price': '‚Çπ80-150'},
                {'name': '‡§ü‡•á‡§™ ‡§Æ‡•á‡§ú‡§∞', 'use': '‡§Æ‡§æ‡§™ ‡§ï‡•á ‡§≤‡§ø‡§è', 'price': '‚Çπ50-100'}
            ]
        },
        'electrical': {
            'name': '‡§á‡§≤‡•á‡§ï‡•ç‡§ü‡•ç‡§∞‡§ø‡§ï‡§≤ ‡§ü‡•Ç‡§≤‡•ç‡§∏',
            'tools': [
                {'name': '‡§ü‡•á‡§∏‡•ç‡§ü‡§∞', 'use': '‡§ï‡§∞‡§Ç‡§ü ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è', 'price': '‚Çπ30-50'},
                {'name': '‡§µ‡§æ‡§Ø‡§∞ ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ø‡§™‡§∞', 'use': '‡§§‡§æ‡§∞ ‡§õ‡•Ä‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è', 'price': '‚Çπ100-200'},
                {'name': '‡§á‡§Ç‡§∏‡•Å‡§≤‡•á‡§∂‡§® ‡§ü‡•á‡§™', 'use': '‡§ú‡•ã‡§°‡§º ‡§ï‡•ã ‡§¢‡§ï‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è', 'price': '‚Çπ20-40'}
            ]
        },
        'plumbing': {
            'name': '‡§™‡•ç‡§≤‡§Ç‡§¨‡§ø‡§Ç‡§ó ‡§ü‡•Ç‡§≤‡•ç‡§∏',
            'tools': [
                {'name': '‡§Æ‡§Ç‡§ï‡•Ä ‡§∞‡•á‡§Ç‡§ö', 'use': '‡§™‡§æ‡§á‡§™ ‡§ï‡•á ‡§ú‡•ã‡§°‡§º ‡§ï‡•á ‡§≤‡§ø‡§è', 'price': '‚Çπ150-300'},
                {'name': '‡§™‡•ç‡§≤‡§Ç‡§ú‡§∞', 'use': '‡§ü‡•â‡§Ø‡§≤‡•á‡§ü/‡§∏‡§ø‡§Ç‡§ï block ‡§ï‡•á ‡§≤‡§ø‡§è', 'price': '‚Çπ100-200'},
                {'name': '‡§™‡§æ‡§á‡§™ ‡§ï‡§ü‡§∞', 'use': '‡§™‡§æ‡§á‡§™ ‡§ï‡§æ‡§ü‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è', 'price': '‚Çπ200-400'}
            ]
        }
    }
    
    return render_template('papa_diy_tools.html', tools=tools)

@bp.route('/emergency-fixes')
def emergency_fixes():
    """Quick emergency fixes for common problems"""
    fixes = [
        {
            'problem': 'üí° Light ‡§®‡§π‡•Ä‡§Ç ‡§ú‡§≤ ‡§∞‡§π‡•Ä',
            'quick_fix': '1. Bulb check ‡§ï‡§∞‡•ã\n2. Switch off-on ‡§ï‡§∞‡•ã\n3. MCB check ‡§ï‡§∞‡•ã',
            'tools_needed': '‡§ü‡•á‡§∏‡•ç‡§ü‡§∞, ‡§®‡§Ø‡§æ bulb',
            'safety': '‚ö†Ô∏è Main switch off ‡§ï‡§∞‡§ï‡•á ‡§ï‡§∞‡•ã!'
        },
        {
            'problem': 'üöø Tap ‡§∏‡•á ‡§™‡§æ‡§®‡•Ä leak',
            'quick_fix': '1. Main valve ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•ã\n2. Tap ‡§ï‡§æ handle tight ‡§ï‡§∞‡•ã\n3. Rubber washer change ‡§ï‡§∞‡•ã',
            'tools_needed': '‡§Æ‡§Ç‡§ï‡•Ä ‡§∞‡•á‡§Ç‡§ö, ‡§®‡§Ø‡§æ washer',
            'safety': '‚ö†Ô∏è ‡§™‡§æ‡§®‡•Ä ‡§ï‡§æ main ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•ã!'
        },
        {
            'problem': 'ü™ë Chair ‡§π‡§ø‡§≤ ‡§∞‡§π‡•Ä ‡§π‡•à',
            'quick_fix': '1. ‡§∏‡§≠‡•Ä screws tight ‡§ï‡§∞‡•ã\n2. ‡§ü‡•Ç‡§ü‡•á parts ‡§ï‡•ã glue ‡§ï‡§∞‡•ã\n3. Support ‡§≤‡§ó‡§æ‡§ì',
            'tools_needed': '‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ç ‡§°‡•ç‡§∞‡§æ‡§á‡§µ‡§∞, fevicol',
            'safety': '‚úÖ ‡§Ü‡§∏‡§æ‡§® ‡§î‡§∞ safe!'
        },
        {
            'problem': 'üö™ Door properly ‡§¨‡§Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∞‡§π‡§æ',
            'quick_fix': '1. Hinges ‡§Æ‡•á‡§Ç oil ‡§°‡§æ‡§≤‡•ã\n2. Door frame check ‡§ï‡§∞‡•ã\n3. Lock mechanism clean ‡§ï‡§∞‡•ã',
            'tools_needed': 'oil, cleaning cloth',
            'safety': '‚úÖ ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ safe!'
        }
    ]
    
    return render_template('papa_emergency_fixes.html', fixes=fixes)

# ============= TASK GENERATOR ROUTES =============
@bp.route('/task-generator')
def task_generator():
    """Generate funny tasks for kids and family"""
    return render_template('papa_task_generator.html')

@bp.route('/api/generate-task', methods=['POST'])
def api_generate_task():
    """API to generate witty household tasks"""
    try:
        data = request.get_json()
        person = data.get('person', '‡§¨‡§ö‡•ç‡§ö‡•á')  # ‡§¨‡§ö‡•ç‡§ö‡•á, wife, ‡§Æ‡§Æ‡•ç‡§Æ‡•Ä, etc.
        mood = data.get('mood', 'normal')  # boring, energetic, lazy, ‡§Æ‡§∏‡•ç‡§§‡•Ä
        time_available = data.get('time', '30')  # minutes
        
        # Generate task based on inputs
        task = generate_funny_task(person, mood, time_available)
        
        return jsonify({
            'success': True,
            'task': task,
            'person': person,
            'estimated_fun': random.choice(['üòÇ Guaranteed Laughter', 'üéâ Family Entertainment', 'üòÑ Time-Pass Champion']),
            'papa_comment': get_papa_task_comment()
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Papa confused ‡§π‡•ã ‡§ó‡§è: {str(e)}'
        })

@bp.route('/api/task-categories')
def api_task_categories():
    """Get available task categories"""
    categories = {
        'person_types': [
            {'value': '‡§¨‡§ö‡•ç‡§ö‡•á', 'label': 'üë∂ ‡§¨‡§ö‡•ç‡§ö‡•á (Kids)', 'description': 'Fun tasks for children'},
            {'value': 'Wife', 'label': 'üë© Wife', 'description': 'Creative tasks for partner'},
            {'value': '‡§Æ‡§Æ‡•ç‡§Æ‡•Ä', 'label': 'üëµ ‡§Æ‡§Æ‡•ç‡§Æ‡•Ä (Mom)', 'description': 'Engaging tasks for mom'},
            {'value': 'Papa', 'label': 'üë® Papa (Self)', 'description': 'Tasks when Papa is free'}
        ],
        'mood_types': [
            {'value': 'boring', 'label': 'üò¥ Boring (‡§∞‡•ã‡§ú‡§º ‡§ï‡§æ ‡§∏‡§æ)', 'description': 'When feeling dull'},
            {'value': 'energetic', 'label': '‚ö° Energetic (‡§è‡§®‡§∞‡•ç‡§ú‡•Ä ‡§≠‡§∞‡§™‡•Ç‡§∞)', 'description': 'When full of energy'},
            {'value': 'lazy', 'label': 'üòÖ Lazy (‡§Ü‡§≤‡§∏‡•Ä ‡§Æ‡•Ç‡§°)', 'description': 'When feeling lazy'},
            {'value': 'masti', 'label': 'üéâ Masti (‡§Æ‡§∏‡•ç‡§§‡•Ä ‡§ï‡§æ ‡§Æ‡•Ç‡§°)', 'description': 'When want to have fun'}
        ],
        'time_options': [
            {'value': '15', 'label': '15 minutes - Quick task'},
            {'value': '30', 'label': '30 minutes - Standard task'}, 
            {'value': '60', 'label': '1 hour - Detailed task'},
            {'value': '120', 'label': '2 hours - Project task'}
        ]
    }
    return jsonify(categories)

# ============= TASK GENERATOR HELPER FUNCTIONS =============
def generate_funny_task(person, mood, time_available):
    """Generate hilarious household tasks"""
    
    # Expanded task database based on person and mood
    task_database = {
        '‡§¨‡§ö‡•ç‡§ö‡•á': {
            'boring': [
                {
                    'task': 'üïµÔ∏è ‡§ò‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§≠‡•Ä remote controls ‡§¢‡•Ç‡§Ç‡§¢ ‡§ï‡§∞ ‡§è‡§ï ‡§ú‡§ó‡§π ‡§∞‡§ñ‡§®‡§æ',
                    'description': 'Detective ‡§¨‡§®‡§ï‡§∞ ‡§∏‡§æ‡§∞‡•á ‡§ó‡§æ‡§Ø‡§¨ remotes ‡§ï‡•ã ‡§¢‡•Ç‡§Ç‡§¢‡§®‡§æ ‡§π‡•à',
                    'reward': 'TV remote ‡§ï‡§æ ‡§Æ‡•Å‡§ñ‡•ç‡§Ø‡§Æ‡§Ç‡§§‡•ç‡§∞‡•Ä ‡§¨‡§® ‡§ú‡§æ‡§ì‡§ó‡•á',
                    'fun_factor': 'Mystery solving + treasure hunt',
                    'papa_tricks': 'Sofa ‡§ï‡•á ‡§®‡•Ä‡§ö‡•á, bed ‡§ï‡•á ‡§¨‡•Ä‡§ö ‡§Æ‡•á‡§Ç, kitchen counter ‡§™‡§∞ check ‡§ï‡§∞‡•ã'
                },
                {
                    'task': 'üì± Papa ‡§ï‡•á phone ‡§ï‡•Ä ‡§∏‡§æ‡§∞‡•Ä blurry photos delete ‡§ï‡§∞‡§®‡§æ',
                    'description': 'Tech expert ‡§¨‡§®‡§ï‡§∞ Papa ‡§ï‡§æ phone clean ‡§ï‡§∞‡§®‡§æ',
                    'reward': 'Photo gallery manager ‡§ï‡§æ title',
                    'fun_factor': 'Papa ‡§ï‡•á weird photos ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•ã ‡§Æ‡§ø‡§≤‡•á‡§Ç‡§ó‡•á',
                    'papa_tricks': 'Screenshots folder ‡§≠‡•Ä check ‡§ï‡§∞‡§®‡§æ, ‡§µ‡§π‡§æ‡§Ç duplicate ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç'
                },
                {
                    'task': 'üß¶ ‡§∏‡§æ‡§∞‡•á ‡§¨‡§ø‡§ñ‡§∞‡•á ‡§π‡•Å‡§è ‡§Æ‡•ã‡§ú‡§º‡•á ‡§ú‡•ã‡§°‡§º‡•á ‡§¨‡§®‡§æ‡§ï‡§∞ arrange ‡§ï‡§∞‡§®‡§æ',
                    'description': 'Matching game ‡§ñ‡•á‡§≤‡§§‡•á ‡§π‡•Å‡§è ‡§∏‡§æ‡§∞‡•á socks ‡§ï‡•ã pair ‡§ï‡§∞‡§®‡§æ',
                    'reward': 'Sock matching champion',
                    'fun_factor': 'Color coordination ‡§∏‡•Ä‡§ñ‡•ã‡§ó‡•á',
                    'papa_tricks': '‡§Ö‡§ï‡•á‡§≤‡•á ‡§Æ‡•ã‡§ú‡§º‡•á ‡§Ö‡§≤‡§ó ‡§∞‡§ñ‡•ã, ‡§∂‡§æ‡§Ø‡§¶ ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç partner ‡§Æ‡§ø‡§≤ ‡§ú‡§æ‡§è'
                }
            ],
            'energetic': [
                {
                    'task': 'üèÉ‚Äç‚ôÇÔ∏è ‡§π‡§∞ ‡§ï‡§Æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§ï‡§∞ 10-10 jumping jacks ‡§ï‡§∞‡§®‡§æ',
                    'description': 'Fitness trainer ‡§¨‡§®‡§ï‡§∞ ‡§ò‡§∞ ‡§ï‡§æ tour ‡§ï‡§∞‡§§‡•á ‡§π‡•Å‡§è exercise',
                    'reward': 'Family ‡§ï‡§æ fitness coach ‡§¨‡§® ‡§ú‡§æ‡§ì‡§ó‡•á',
                    'fun_factor': 'Energy burn + house exploration',
                    'papa_tricks': '‡§π‡§∞ room ‡§Æ‡•á‡§Ç ‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó exercise ‡§ï‡§∞‡•ã - push-ups, sit-ups'
                },
                {
                    'task': 'üéµ ‡§π‡§∞ room ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§ï‡§∞ ‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó song ‡§™‡§∞ dance ‡§ï‡§∞‡§®‡§æ',
                    'description': 'Mobile entertainer ‡§¨‡§®‡§ï‡§∞ ‡§ò‡§∞ ‡§ï‡•á ‡§π‡§∞ ‡§ï‡•ã‡§®‡•á ‡§Æ‡•á‡§Ç performance',
                    'reward': 'Family ‡§ï‡§æ ‡§°‡§æ‡§Ç‡§∏‡§∞ + DJ',
                    'fun_factor': 'Music + dance + movement',
                    'papa_tricks': '‡§π‡§∞ room ‡§ï‡•á ‡§≤‡§ø‡§è ‡§â‡§∏ room ‡§ï‡•á suitable song choose ‡§ï‡§∞‡•ã'
                }
            ],
            'lazy': [
                {
                    'task': 'üõãÔ∏è Sofa ‡§™‡§∞ ‡§¨‡•à‡§†‡•á-‡§¨‡•à‡§†‡•á TV channels count ‡§ï‡§∞‡§®‡§æ',
                    'description': 'Remote control ‡§ï‡•á ‡§∏‡§æ‡§• research project',
                    'reward': 'TV channel encyclopedia',
                    'fun_factor': '‡§Ü‡§∞‡§æ‡§Æ ‡§∏‡•á ‡§¨‡•à‡§†‡§ï‡§∞ useful ‡§ï‡§æ‡§Æ',
                    'papa_tricks': '‡§Ö‡§ö‡•ç‡§õ‡•á channels ‡§ï‡§æ list ‡§≠‡•Ä ‡§¨‡§®‡§æ ‡§¶‡•á‡§®‡§æ'
                }
            ],
            'masti': [
                {
                    'task': 'üé≠ Family ‡§ï‡•á ‡§π‡§∞ member ‡§ï‡§æ 2-minute mimicry show',
                    'description': 'Comedy show ‡§ï‡§∞‡§®‡§æ ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§∏‡§¨‡§ï‡•Ä ‡§®‡§ï‡§≤ ‡§ï‡§∞‡§®‡•Ä ‡§π‡•à',
                    'reward': 'Family comedian title',
                    'fun_factor': 'Acting + entertainment + laughter',
                    'papa_tricks': 'Papa ‡§ï‡•Ä morning routine ‡§ï‡•Ä mimicry ‡§∏‡§¨‡§∏‡•á funny ‡§π‡•ã‡§ó‡•Ä'
                }
            ]
        },
        'Wife': {
            'boring': [
                {
                    'task': 'üíÑ ‡§∏‡§æ‡§∞‡•á beauty products ‡§ï‡•ã expiry date wise arrange ‡§ï‡§∞‡§®‡§æ',
                    'description': 'Beauty inventory manager ‡§¨‡§®‡§®‡§æ',
                    'reward': 'New cosmetic shopping budget approved',
                    'fun_factor': 'Organization + future shopping planning',
                    'papa_tricks': 'Expired ones ‡§ï‡§æ list ‡§¨‡§®‡§æ‡§ï‡§∞ Papa ‡§ï‡•ã dikhana'
                }
            ],
            'energetic': [
                {
                    'task': 'üå± ‡§∏‡§æ‡§∞‡•á plants ‡§ï‡•ã n‡§è pots ‡§Æ‡•á‡§Ç shift ‡§ï‡§∞‡§®‡§æ',
                    'description': 'Garden makeover project',
                    'reward': 'New plants buying approved',
                    'fun_factor': 'Gardening + home beautification',
                    'papa_tricks': 'Before-after photos ‡§≤‡•á‡§®‡§æ for social media'
                }
            ],
            'masti': [
                {
                    'task': 'ü§≥ ‡§π‡§∞ room ‡§ï‡§æ Instagram-worthy photoshoot',
                    'description': 'Interior designer + photographer ‡§¨‡§®‡§®‡§æ',
                    'reward': 'Social media bragging rights',
                    'fun_factor': 'Creativity + social media content',
                    'papa_tricks': 'Different lighting ‡§î‡§∞ angles try ‡§ï‡§∞‡§®‡§æ'
                }
            ]
        },
        '‡§Æ‡§Æ‡•ç‡§Æ‡•Ä': [
            {
                'task': 'ü•ò Kitchen ‡§ï‡•á ‡§∏‡§æ‡§∞‡•á masala containers ‡§ï‡•ã alphabetical order ‡§Æ‡•á‡§Ç arrange ‡§ï‡§∞‡§®‡§æ',
                'description': 'Spice library manager ‡§¨‡§®‡§®‡§æ',
                'reward': 'Kitchen queen crown',
                'fun_factor': 'Organization + cooking efficiency',
                'papa_tricks': 'Labels ‡§≠‡•Ä ‡§≤‡§ó‡§æ ‡§¶‡•á‡§®‡§æ for easy identification',
                'mood': 'boring'
            }
        ],
        'Papa': [
            {
                'task': 'üîß ‡§ò‡§∞ ‡§ï‡•á ‡§∏‡§æ‡§∞‡•á loose screws find ‡§ï‡§∞‡§ï‡•á tight ‡§ï‡§∞‡§®‡§æ',
                'description': 'Professional maintenance engineer ‡§¨‡§®‡§®‡§æ',
                'reward': 'Household engineer title',
                'fun_factor': 'Practical work + problem solving',
                'papa_tricks': 'Tool box organize ‡§≠‡•Ä ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ',
                'mood': 'boring'
            }
        ]
    }
    
    # Get tasks for the person
    person_tasks = task_database.get(person, task_database['‡§¨‡§ö‡•ç‡§ö‡•á'])
    
    # If person_tasks is a dict with moods, get mood-specific tasks
    if isinstance(person_tasks, dict) and mood in person_tasks:
        available_tasks = person_tasks[mood]
    elif isinstance(person_tasks, dict):
        # Get first available mood for that person
        available_tasks = list(person_tasks.values())[0]
    else:
        # If person_tasks is a list, filter by mood if available
        available_tasks = [task for task in person_tasks if task.get('mood', 'any') in [mood, 'any']]
        if not available_tasks:
            available_tasks = person_tasks
    
    # Select random task
    selected_task = random.choice(available_tasks)
    
    # Add time and difficulty estimates
    selected_task['estimated_time'] = f"{time_available} minutes"
    selected_task['difficulty'] = random.choice(['‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ ‡§Ü‡§∏‡§æ‡§®', '‡§Ü‡§∏‡§æ‡§® ‡§π‡•à', '‡§•‡•ã‡§°‡§º‡§æ challenge', '‡§Æ‡§ú‡§º‡•á‡§¶‡§æ‡§∞'])
    selected_task['completion_probability'] = random.choice(['95% success rate', '100% fun guaranteed', '90% effective'])
    
    return selected_task

def get_papa_task_comment():
    """Get Papa's witty comment on the task"""
    comments = [
        "‡§Ö‡§∞‡•á ‡§µ‡§æ‡§π! ‡§Ø‡§π ‡§§‡•ã genius idea ‡§π‡•à! ‡§¶‡•ã ‡§ï‡§æ‡§Æ ‡§è‡§ï ‡§∏‡§æ‡§•! ü§ì",
        "‡§á‡§∏‡§∏‡•á ‡§ò‡§∞ ‡§≠‡•Ä clean ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ ‡§î‡§∞ ‡§¨‡•ã‡§∞‡§ø‡§Ø‡§§ ‡§≠‡•Ä ‡§≠‡§æ‡§ó ‡§ú‡§æ‡§è‡§ó‡•Ä! üòÑ",
        "Papa approved task! Entertainment + productivity = Perfect combo! üëè",
        "‡§¨‡§ö‡•ç‡§ö‡•á ‡§ñ‡•Å‡§∂, ‡§ò‡§∞ ‡§≠‡•Ä ‡§∏‡§æ‡§´! ‡§Ø‡§π‡•Ä ‡§§‡•ã ‡§ö‡§æ‡§π‡§ø‡§è ‡§•‡§æ! üéâ",
        "‡§Ø‡§π task ‡§§‡•ã family bonding ‡§≠‡•Ä ‡§¨‡§®‡§æ ‡§¶‡•á‡§ó‡§æ! ‡§∏‡§¨‡§ï‡•ã involve ‡§ï‡§∞‡•ã! ‚ù§Ô∏è",
        "Creative parenting level: Expert! IIT ‡§Æ‡•á‡§Ç admission confirm! üèÜ",
        "‡§ò‡§∞ ‡§ï‡§æ ‡§ï‡§æ‡§Æ + ‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§® = Papa ‡§ï‡§æ jugaad strikes again! üí°",
        "‡§á‡§∏‡•á ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§¨‡§ö‡•ç‡§ö‡§æ tired ‡§π‡•ã‡§ï‡§∞ ‡§∏‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ! Bonus point! üò¥",
        "‡§Ø‡§π ‡§ï‡§∞‡§ï‡•á ‡§¶‡•á‡§ñ‡•ã, ‡§´‡§ø‡§∞ ‡§¨‡§§‡§æ‡§®‡§æ ‡§ï‡§ø‡§§‡§®‡§æ ‡§Æ‡§ú‡§º‡§æ ‡§Ü‡§Ø‡§æ! ü§©",
        "Perfect Sunday activity! Productive + entertaining! üåü"
    ]
    return random.choice(comments)


# ============= PROBLEM SOLVER ROUTES =============
@bp.route('/problem-solver')
def problem_solver():
    """Papa's problem solving hub"""
    return render_template('papa_problem_solver.html')

@bp.route('/api/solve-problem', methods=['POST'])
def api_solve_problem():
    """API to get solutions for household problems"""
    try:
        data = request.get_json()
        problem = data.get('problem', '').strip()
        urgency = data.get('urgency', 'normal')  # emergency, normal, can-wait
        category = data.get('category', 'general')  # electrical, plumbing, tech, etc.
        
        if not problem:
            return jsonify({
                'success': False,
                'error': 'Problem ‡§§‡•ã ‡§¨‡§§‡§æ‡§ì ‡§≠‡§æ‡§à! Papa ‡§ï‡•à‡§∏‡•á help ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á?'
            })
        
        # Get solutions
        solutions = get_problem_solutions(problem, urgency)
        papa_advice = get_papa_problem_advice(problem)
        youtube_links = search_tutorial_videos(problem)
        
        return jsonify({
            'success': True,
            'problem': problem,
            'urgency': urgency,
            'category': detect_problem_category(problem),
            'solutions': solutions,
            'papa_advice': papa_advice,
            'youtube_tutorials': youtube_links,
            'estimated_time': estimate_fix_time(problem),
            'difficulty': estimate_difficulty(problem),
            'tools_needed': get_required_tools(problem)
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': f'Papa ‡§ï‡•á pass solution ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ: {str(e)}'
        })

@bp.route('/api/common-problems')
def api_common_problems():
    """Get list of common household problems"""
    problems = [
        {'problem': 'üåÄ Fan ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à', 'category': 'electrical', 'urgency': 'normal', 'popularity': '‡§¨‡§π‡•Å‡§§ common'},
        {'problem': 'üöø Tap ‡§∏‡•á ‡§™‡§æ‡§®‡•Ä leak ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à', 'category': 'plumbing', 'urgency': 'high', 'popularity': 'Daily ‡§π‡•ã‡§§‡§æ ‡§π‡•à'},
        {'problem': 'üì± WiFi ‡§¨‡§π‡•Å‡§§ slow ‡§π‡•à', 'category': 'tech', 'urgency': 'normal', 'popularity': '‡§π‡§Æ‡•á‡§∂‡§æ problem'},
        {'problem': '‚ùÑÔ∏è AC ‡§†‡§Ç‡§°‡§æ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∞‡§π‡§æ', 'category': 'appliances', 'urgency': 'high', 'popularity': 'Summer special'},
        {'problem': 'üö™ Door properly ‡§¨‡§Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∞‡§π‡§æ', 'category': 'general', 'urgency': 'low', 'popularity': 'Monsoon ‡§Æ‡•á‡§Ç ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ'},
        {'problem': 'ü™ë Chair ‡§ü‡•Ç‡§ü ‡§ó‡§à ‡§π‡•à', 'category': 'furniture', 'urgency': 'low', 'popularity': 'Overuse ‡§∏‡•á ‡§π‡•ã‡§§‡§æ ‡§π‡•à'},
        {'problem': 'üí° Light ‡§®‡§π‡•Ä‡§Ç ‡§ú‡§≤ ‡§∞‡§π‡•Ä', 'category': 'electrical', 'urgency': 'normal', 'popularity': '‡§∞‡•ã‡§ú‡§º ‡§ï‡§æ drama'},
        {'problem': 'üì∫ TV remote ‡§ï‡§æ‡§Æ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∞‡§π‡§æ', 'category': 'tech', 'urgency': 'low', 'popularity': '‡§¨‡§ö‡•ç‡§ö‡•ã‡§Ç ‡§ï‡•Ä ‡§µ‡§ú‡§π ‡§∏‡•á'},
        {'problem': 'üöΩ Toilet flush ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∞‡§π‡§æ', 'category': 'plumbing', 'urgency': 'high', 'popularity': 'Common issue'},
        {'problem': 'üîå Socket ‡§Æ‡•á‡§Ç plug loose ‡§π‡•ã ‡§ó‡§Ø‡§æ', 'category': 'electrical', 'urgency': 'medium', 'popularity': 'Safety concern'}
    ]
    
    return jsonify({'common_problems': problems})


# ============= PROBLEM SOLVER HELPER FUNCTIONS =============

def get_problem_solutions(problem, urgency):
    """Get comprehensive step-by-step solutions"""
    
    solutions_db = {
        'fan': {
            'quick_check': [
                '‚ö° Main switch on ‡§π‡•à ‡§ï‡§ø ‡§®‡§π‡•Ä‡§Ç check ‡§ï‡§∞‡•ã',
                'üîå Fan ‡§ï‡§æ regulator properly connected ‡§π‡•à?',
                'üí° ‡§¶‡•Ç‡§∏‡§∞‡•á electrical items ‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?',
                'üåÄ Fan ‡§ï‡•á blades manually ‡§ò‡•Å‡§Æ‡§æ‡§®‡•á ‡§∏‡•á ‡§ö‡§≤‡§§‡§æ ‡§π‡•à?'
            ],
            'diy_steps': [
                'üîß Main switch off ‡§ï‡§∞‡§ï‡•á safety ensure ‡§ï‡§∞‡•ã',
                'üßΩ Fan blades ‡§ï‡•ã clean ‡§ï‡§∞‡•ã - dust accumulation check ‡§ï‡§∞‡•ã', 
                'üî® All screws ‡§î‡§∞ brackets properly tight ‡§π‡•à‡§Ç ‡§ï‡§ø ‡§®‡§π‡•Ä‡§Ç',
                '‚öôÔ∏è Capacitor check ‡§ï‡§∞‡•ã - bulged ‡§Ø‡§æ burnt smell?',
                'üíß Motor bearings ‡§Æ‡•á‡§Ç oil drop ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à',
                'üîÑ Regulator ‡§ï‡•ã different speeds ‡§™‡§∞ test ‡§ï‡§∞‡•ã'
            ],
            'safety_tips': [
                '‚ö†Ô∏è ‡§π‡§Æ‡•á‡§∂‡§æ main switch off ‡§ï‡§∞‡§ï‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•ã',
                'üß§ Rubber gloves ‡§™‡§π‡§®‡•ã electrical work ‡§ï‡•á ‡§≤‡§ø‡§è',
                'üî¶ Good lighting ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•ã',
                'üë• Someone ‡§ï‡•ã inform ‡§ï‡§∞‡§ï‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•ã'
            ],
            'when_to_call_expert': '‡§Ö‡§ó‡§∞ capacitor burnt smell ‡§Ü ‡§∞‡§π‡•Ä ‡§π‡•à ‡§Ø‡§æ motor ‡§∏‡•á grinding sound ‡§Ü ‡§∞‡§π‡§æ ‡§π‡•à ‡§Ø‡§æ rewiring ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§π‡•à'
        },
        'tap': {
            'quick_check': [
                'üö∞ Main water supply on ‡§π‡•à ‡§ï‡§ø ‡§®‡§π‡•Ä‡§Ç',
                'üíß ‡§¶‡•Ç‡§∏‡§∞‡•á taps ‡§∏‡•á ‡§™‡§æ‡§®‡•Ä ‡§Ü ‡§∞‡§π‡§æ ‡§π‡•à ‡§ï‡§ø ‡§®‡§π‡•Ä‡§Ç',
                'üîß Tap handle properly turn ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à?',
                'üëÄ Visible leak ‡§ï‡§π‡§æ‡§Å ‡§∏‡•á ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à - handle ‡§∏‡•á ‡§Ø‡§æ base ‡§∏‡•á?'
            ],
            'diy_steps': [
                'üîß Main water valve ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•ã ‡§™‡§π‡§≤‡•á (very important)',
                'ü™õ Tap ‡§ï‡§æ handle remove ‡§ï‡§∞‡§ï‡•á rubber washer check ‡§ï‡§∞‡•ã',
                'üßΩ Valve seat ‡§ï‡•ã clean ‡§ï‡§∞‡•ã - sediment ‡§π‡§ü‡§æ‡§ì',
                'üîÑ ‡§®‡§Ø‡§æ washer ‡§≤‡§ó‡§æ‡§ï‡§∞ proper ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á reassemble ‡§ï‡§∞‡•ã',
                'üíß Slowly water supply on ‡§ï‡§∞‡§ï‡•á test ‡§ï‡§∞‡•ã',
                'üîç ‡§ï‡•ã‡§à leak ‡§§‡•ã ‡§®‡§π‡•Ä‡§Ç - thorough check ‡§ï‡§∞‡•ã'
            ],
            'safety_tips': [
                'üíß Main valve ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§®‡§æ ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ ‡§Æ‡§§ ‡§≠‡•Ç‡§≤‡•ã',
                'üßΩ Clean cloth ‡§∏‡•á area ‡§ï‡•ã dry ‡§∞‡§ñ‡•ã',
                'üîß Right size tools use ‡§ï‡§∞‡•ã - force ‡§®‡§π‡•Ä‡§Ç ‡§≤‡§ó‡§æ‡§ì'
            ],
            'when_to_call_expert': '‡§Ö‡§ó‡§∞ main pipe ‡§Æ‡•á‡§Ç leak ‡§π‡•à ‡§Ø‡§æ pressure issues ‡§π‡•à‡§Ç ‡§Ø‡§æ multiple taps affected ‡§π‡•à‡§Ç'
        },
        'wifi': {
            'quick_check': [
                'üì± Phone ‡§Æ‡•á‡§Ç ‡§¶‡•Ç‡§∏‡§∞‡•á WiFi networks ‡§¶‡§ø‡§ñ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç?',
                'üîå Router ‡§ï‡§æ power properly connected ‡§π‡•à?',
                'üí° Router ‡§ï‡•á lights green ‡§π‡•à‡§Ç ‡§ï‡§ø ‡§®‡§π‡•Ä‡§Ç?',
                'üì∂ Router ‡§ï‡•á ‡§™‡§æ‡§∏ ‡§ú‡§æ‡§ï‡§∞ speed test ‡§ï‡§∞‡•ã'
            ],
            'diy_steps': [
                'üîÑ Router ‡§ï‡•ã 30 seconds off ‡§ï‡§∞‡§ï‡•á ‡§´‡§ø‡§∞ on ‡§ï‡§∞‡•ã',
                'üìç Router ‡§ï‡•Ä position central ‡§î‡§∞ elevated ‡§∞‡§ñ‡•ã',
                'üì± Phone ‡§ï‡•ã WiFi forget ‡§ï‡§∞‡§ï‡•á ‡§´‡§ø‡§∞ reconnect ‡§ï‡§∞‡•ã',
                'üíª Speed test different devices ‡§™‡§∞ ‡§ï‡§∞‡•ã',
                'üåê ISP ‡§ï‡•á customer care ‡§Æ‡•á‡§Ç speed complaint ‡§ï‡§∞‡•ã',
                'üì° Router antennas ‡§ï‡•ã properly position ‡§ï‡§∞‡•ã'
            ],
            'safety_tips': [
                '‚ö° Router ‡§ï‡•ã properly ventilated area ‡§Æ‡•á‡§Ç ‡§∞‡§ñ‡•ã',
                'üå°Ô∏è Overheating ‡§∏‡•á ‡§¨‡§ö‡§æ‡§ì - dust clean ‡§ï‡§∞‡§§‡•á ‡§∞‡§π‡•ã'
            ],
            'when_to_call_expert': '‡§Ö‡§ó‡§∞ hardware damage ‡§π‡•à ‡§Ø‡§æ ISP line issue ‡§π‡•à ‡§Ø‡§æ multiple devices ‡§∏‡•á ‡§ï‡•ã‡§à connect ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∞‡§π‡§æ'
        },
        'ac': {
            'quick_check': [
                '‚ö° AC ‡§ï‡§æ power on ‡§π‡•à ‡§î‡§∞ display working ‡§π‡•à?',
                'üå°Ô∏è Remote ‡§Æ‡•á‡§Ç ‡§∏‡§π‡•Ä temperature set ‡§π‡•à?',
                'üí® AC ‡§∏‡•á air ‡§Ü ‡§∞‡§π‡§æ ‡§π‡•à ‡§≤‡•á‡§ï‡§ø‡§® ‡§†‡§Ç‡§°‡•Ä ‡§®‡§π‡•Ä‡§Ç?',
                'üßä Ice formation ‡§§‡•ã ‡§®‡§π‡•Ä‡§Ç outdoor unit ‡§™‡§∞?'
            ],
            'diy_steps': [
                'üßΩ Indoor filter ‡§ï‡•ã remove ‡§ï‡§∞‡§ï‡•á clean ‡§ï‡§∞‡•ã',
                'üí® Outdoor unit ‡§ï‡•á around clean ‡§ï‡§∞‡•ã - leaves ‡§π‡§ü‡§æ‡§ì',
                'üå°Ô∏è Thermostat setting check ‡§ï‡§∞‡•ã',
                '‚è∞ AC ‡§ï‡•ã 30 minutes run ‡§ï‡§∞‡§ï‡•á ‡§¶‡•á‡§ñ‡•ã',
                'üìè Proper distance maintain ‡§ï‡§∞‡•ã furniture ‡§∏‡•á',
                'üö™ Room properly sealed ‡§π‡•à - doors/windows check ‡§ï‡§∞‡•ã'
            ],
            'safety_tips': [
                '‚ö° Main power off ‡§ï‡§∞‡§ï‡•á filter cleaning ‡§ï‡§∞‡•ã',
                'üß§ Gloves ‡§™‡§π‡§®‡§ï‡§∞ outdoor unit clean ‡§ï‡§∞‡•ã'
            ],
            'when_to_call_expert': '‡§Ö‡§ó‡§∞ gas refill ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§π‡•à ‡§Ø‡§æ compressor issues ‡§π‡•à‡§Ç ‡§Ø‡§æ electrical problems ‡§π‡•à‡§Ç'
        }
    }
    
    # Detect problem type and return relevant solution
    problem_lower = problem.lower()
    
    for key, solution in solutions_db.items():
        if key in problem_lower:
            return solution
    
    # Generic solution for unknown problems
    return {
        'quick_check': [
            'üîç Problem ‡§ï‡•ã exactly identify ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•ã',
            'üìñ Manual ‡§Ø‡§æ warranty card check ‡§ï‡§∞‡•ã',
            'üîå Power supply ‡§î‡§∞ connections verify ‡§ï‡§∞‡•ã',
            'üëÄ Visual inspection ‡§ï‡§∞‡•ã - ‡§ï‡•Å‡§õ obvious damage?'
        ],
        'diy_steps': [
            'üìñ Product manual ‡§™‡§¢‡§º‡•ã ‡§Ö‡§ó‡§∞ available ‡§π‡•à',
            'üé• YouTube ‡§™‡§∞ similar problem search ‡§ï‡§∞‡•ã',
            'üîß Basic cleaning ‡§î‡§∞ tightening try ‡§ï‡§∞‡•ã',
            'üìû Manufacturer helpline ‡§™‡§∞ call ‡§ï‡§∞‡•ã',
            'üí¨ Online forums ‡§Æ‡•á‡§Ç similar cases ‡§¢‡•Ç‡§Ç‡§¢‡•ã'
        ],
        'safety_tips': [
            '‚ö†Ô∏è ‡§Ö‡§ó‡§∞ electrical item ‡§π‡•à ‡§§‡•ã power off ‡§ï‡§∞‡•ã',
            'üß§ Safety gear use ‡§ï‡§∞‡•ã',
            'üë• ‡§ï‡§ø‡§∏‡•Ä ‡§ï‡•ã inform ‡§ï‡§∞‡§ï‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡•ã'
        ],
        'when_to_call_expert': '‡§Ö‡§ó‡§∞ safety concern ‡§π‡•à ‡§Ø‡§æ warranty void ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à ‡§Ø‡§æ complex repair ‡§ö‡§æ‡§π‡§ø‡§è'
    }

def get_papa_problem_advice(problem):
    """Papa's specific wisdom for different problems"""
    
    advice_db = {
        'fan': '‡§¨‡•á‡§ü‡§æ, fan ‡§ï‡•Ä 90% problems capacitor ‡§Ø‡§æ dust ‡§Æ‡•á‡§Ç ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡§Ç‡•§ ‡§ó‡§∞‡•ç‡§Æ‡•Ä ‡§Æ‡•á‡§Ç fan repair ‡§ï‡§∞‡§®‡§æ ‡§¨‡§π‡•Å‡§§ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•à‡•§ Safety ‡§ï‡•á ‡§≤‡§ø‡§è ‡§π‡§Æ‡•á‡§∂‡§æ main switch off ‡§∞‡§ñ‡•ã‡•§ Capacitor ‚Çπ50 ‡§ï‡§æ ‡§π‡•à, electrician ‚Çπ500 ‡§≤‡•á‡§§‡§æ ‡§π‡•à!',
        'tap': 'Tap leakage mostly rubber washer (‚Çπ5) ‡§ï‡•Ä ‡§µ‡§ú‡§π ‡§∏‡•á ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§ Main valve location ‡§™‡§π‡§≤‡•á ‡§∏‡•á ‡§™‡§§‡§æ ‡§ï‡§∞ ‡§≤‡•ã, emergency ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§Ü‡§è‡§ó‡§æ‡•§ ‡§™‡§æ‡§®‡•Ä ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§®‡§æ ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ ‡§Æ‡§§ ‡§≠‡•Ç‡§≤‡•ã - flooding ‡§π‡•ã ‡§∏‡§ï‡§§‡•Ä ‡§π‡•à!',
        'wifi': 'WiFi problems ‡§Æ‡•á‡§Ç 80% router restart ‡§∏‡•á solve ‡§π‡•ã ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡§Ç‡•§ Router ‡§ï‡•ã corner ‡§Æ‡•á‡§Ç ‡§Æ‡§§ ‡§∞‡§ñ‡•ã, heat ‡§î‡§∞ dust ‡§∏‡•á ‡§¨‡§ö‡§æ‡§ì‡•§ Speed slow ‡§π‡•à ‡§§‡•ã ISP ‡§ï‡•ã complaint ‡§ï‡§∞‡§®‡§æ ‡§™‡§°‡§º‡•á‡§ó‡§æ, data backup ‡§∞‡§ñ‡•ã‡•§',
        'ac': 'AC ‡§ï‡•Ä filter monthly clean ‡§ï‡§∞‡§§‡•á ‡§∞‡§π‡•ã, gas filling ‡§∏‡•á ‡§¨‡§ö ‡§ú‡§æ‡§è‡§ó‡•Ä‡•§ Summer ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á service ‡§ï‡§∞‡§µ‡§æ ‡§≤‡•ã. Emergency ‡§Æ‡•á‡§Ç fan + AC together chalao, jaldi ‡§†‡§Ç‡§°‡§ï ‡§Æ‡§ø‡§≤‡•á‡§ó‡•Ä‡•§',
        'door': 'Door problems ‡§Æ‡•á‡§Ç WD-40 ‡§Ø‡§æ coconut oil magic ‡§ï‡§∞‡§§‡§æ ‡§π‡•à. Monsoon ‡§Æ‡•á‡§Ç wood swelling ‡§π‡•ã‡§§‡•Ä ‡§π‡•à, normal ‡§π‡•à‡•§ Hinges ‡§ï‡•Ä proper lubrication ‡§ï‡§∞‡§§‡•á ‡§∞‡§π‡•ã‡•§',
        'light': 'Light problems ‡§Æ‡•á‡§Ç ‡§™‡§π‡§≤‡•á bulb change ‡§ï‡§∞‡§ï‡•á ‡§¶‡•á‡§ñ‡•ã‡•§ Switch ‡§î‡§∞ holder loose ‡§§‡•ã ‡§®‡§π‡•Ä‡§Ç? Electrical items ‡§Æ‡•á‡§Ç ‡§π‡§Æ‡•á‡§∂‡§æ right wattage use ‡§ï‡§∞‡•ã‡•§'
    }
    
    problem_lower = problem.lower()
    
    for key, advice in advice_db.items():
        if key in problem_lower:
            return advice
    
    return '‡§¨‡•á‡§ü‡§æ, ‡§π‡§∞ problem ‡§ï‡§æ solution ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§ Google ‡§î‡§∞ YouTube Papa ‡§ï‡•á ‡§¨‡§æ‡§¶ ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡•á teachers ‡§π‡•à‡§Ç‡•§ Safety first, patience second, ‡§î‡§∞ ‡§ú‡§¨ doubt ‡§π‡•ã ‡§§‡•ã expert ‡§∏‡•á ‡§™‡•Ç‡§õ ‡§≤‡•ã‡•§ DIY ‡§Æ‡•á‡§Ç 70% problems solve ‡§π‡•ã ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à‡§Ç!'

def search_tutorial_videos(problem):
    """Generate YouTube tutorial links for the problem"""
    import urllib.parse
    
    # Enhanced search queries for better results
    search_queries = {
        'fan': 'ceiling fan not working repair hindi tutorial',
        'tap': 'tap leaking repair plumbing hindi',
        'wifi': 'wifi slow speed fix router hindi',
        'ac': 'air conditioner not cooling repair hindi',
        'door': 'door repair hinges hindi tutorial',
        'light': 'light bulb holder repair electrical hindi'
    }
    
    problem_lower = problem.lower()
    
    # Find relevant search query
    search_query = None
    for key, query in search_queries.items():
        if key in problem_lower:
            search_query = query
            break
    
    if not search_query:
        search_query = f"{problem} repair hindi tutorial DIY"
    
    # Generate multiple search variations
    tutorials = []
    
    base_url = "https://www.youtube.com/results?search_query="
    
    search_variations = [
        f"{search_query} step by step",
        f"{search_query} DIY home repair",
        f"{search_query} professional vs DIY"
    ]
    
    for i, variation in enumerate(search_variations):
        tutorials.append({
            'title': f"Tutorial {i+1}: {problem} - Hindi Solution",
            'description': f"Step by step repair guide in Hindi",
            'search_link': base_url + urllib.parse.quote(variation),
            'estimated_duration': f"{random.randint(5,15)} minutes",
            'papa_rating': random.choice(["‚≠ê‚≠ê‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê"]),
            'difficulty_level': random.choice(["Beginner", "Intermediate", "Advanced"]),
            'channel_type': random.choice(["DIY Expert", "Professional", "Home Repair"])
        })
    
    return tutorials

def detect_problem_category(problem):
    """Automatically detect problem category"""
    
    categories = {
        'electrical': ['fan', 'light', 'bulb', 'socket', 'switch', 'wiring', 'electrical'],
        'plumbing': ['tap', 'pipe', 'water', 'leak', 'toilet', 'flush', 'drain'],
        'tech': ['wifi', 'internet', 'router', 'phone', 'computer', 'tv', 'remote'],
        'appliances': ['ac', 'air conditioner', 'fridge', 'washing machine', 'microwave'],
        'furniture': ['chair', 'table', 'bed', 'cabinet', 'drawer'],
        'general': ['door', 'window', 'wall', 'paint', 'clean']
    }
    
    problem_lower = problem.lower()
    
    for category, keywords in categories.items():
        if any(keyword in problem_lower for keyword in keywords):
            return category
    
    return 'general'

def estimate_fix_time(problem):
    """Estimate repair time based on problem type"""
    
    time_estimates = {
        'fan': '45-90 minutes (including cleaning)',
        'tap': '20-45 minutes (washer replacement)', 
        'wifi': '10-30 minutes (mostly settings)',
        'ac': '30-60 minutes (filter cleaning only)',
        'door': '15-30 minutes (lubrication/adjustment)',
        'light': '5-20 minutes (bulb/holder replacement)',
        'toilet': '30-60 minutes (flush mechanism)',
        'socket': '20-40 minutes (replacement work)'
    }
    
    problem_lower = problem.lower()
    
    for key, time in time_estimates.items():
        if key in problem_lower:
            return time
    
    return '30-90 minutes (depends on complexity)'

def estimate_difficulty(problem):
    """Estimate difficulty level with Papa's perspective"""
    
    difficulty_levels = {
        'fan': 'Medium - Electrical ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä helpful ‡§π‡•ã‡§ó‡•Ä',
        'tap': 'Easy - Basic tools ‡§ï‡§æ‡§´‡•Ä ‡§π‡•à‡§Ç',
        'wifi': 'Easy - Settings change ‡§ï‡§∞‡§®‡§æ ‡§π‡•à',
        'ac': 'Easy (cleaning) / Hard (gas refill)',
        'door': 'Easy - Maintenance work ‡§π‡•à',
        'light': 'Easy - Simple replacement',
        'toilet': 'Medium - Plumbing basics ‡§ú‡§æ‡§®‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è',
        'socket': 'Hard - Electrical expertise ‡§ú‡§∞‡•Ç‡§∞‡•Ä'
    }
    
    problem_lower = problem.lower()
    
    for key, difficulty in difficulty_levels.items():
        if key in problem_lower:
            return difficulty
    
    return 'Medium - Basic DIY skills ‡§î‡§∞ patience ‡§ú‡§∞‡•Ç‡§∞‡•Ä'

def get_required_tools(problem):
    """List tools needed for the repair"""
    
    tools_db = {
        'fan': ['Screwdriver set', 'Multimeter (optional)', 'Clean cloth', 'Oil/WD-40', 'Ladder/stool'],
        'tap': ['Adjustable wrench', 'Screwdriver', 'New rubber washer', 'Plumber tape', 'Clean cloth'],
        'wifi': ['No tools needed', 'Just phone/laptop', 'Router manual (optional)'],
        'ac': ['Clean cloth', 'Vacuum cleaner', 'Mild detergent', 'Water spray'],
        'door': ['Screwdriver', 'Oil/WD-40', 'Sandpaper (optional)', 'Clean cloth'],
        'light': ['Screwdriver', 'New bulb/holder', 'Voltage tester', 'Wire stripper (if needed)']
    }
    
    problem_lower = problem.lower()
    
    for key, tools in tools_db.items():
        if key in problem_lower:
            return tools
    
    return ['Basic toolkit', 'Screwdriver set', 'Clean cloth', 'Flashlight', 'Patience ‡§î‡§∞ common sense']